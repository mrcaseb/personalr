[{"path":"https://mrcaseb.github.io/personalr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Sebastian Carl Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mrcaseb.github.io/personalr/articles/personalr.html","id":"acknowledgement","dir":"Articles","previous_headings":"","what":"Acknowledgement","title":"Introduction to personalr","text":"Setting R package isn’t really intuitive developer needs basic understanding package conventions good practice methods. multiple packages R landscape help exactly . personalr makes heavy usage important package development helper package: usethis. ton useful functions developer know needed individual purpose. personalr less wrapper around several usethis functions completes whole thing helper functions. package setup personalr creates also based tidyverse package. Everything need know R package development perfectly summarized Hadley Wickham’s book R Packages.","code":""},{"path":[]},{"path":"https://mrcaseb.github.io/personalr/articles/personalr.html","id":"first-setup","dir":"Articles","previous_headings":"Usage","what":"First setup","title":"Introduction to personalr","text":"main function personalr setup_package(). Handed valid path, desired package name vector list package names (‘core’ personal package created) following things: create project intended package name create basic package files like DESCRIPTION (including Imports ‘core’ packages), NAMESPACE “R” directory create basic Readme create scripts functions R directory required attach core packages add pipe operator magrittr::%>%() exported functions usable soon package loaded document install package open new package separate R session. following example creates new package \"mypackage\" core packages dplyr, glue purrr temporary directory. setup finished new package installed, new package opened separate R session. show following files directories","code":"library(personalr) temp_directory <- tempdir() setup_package(path = temp_directory, packagename = \"mypackage\", core = c(\"dplyr\", \"glue\", \"purrr\")) #> ✔ Creating '/tmp/RtmpJgmyBY/mypackage/' #> ✔ Setting active project to '/tmp/RtmpJgmyBY/mypackage' #> ✔ Creating 'R/' #> ✔ Writing 'DESCRIPTION' #> Package: mypackage #> Title: What the Package Does (One Line, Title Case) #> Version: 1.0.0 #> Authors@R (parsed): #>     * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID) #> Description: What the package does (one paragraph). #> License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a #>     license #> Encoding: UTF-8 #> Roxygen: list(markdown = TRUE) #> RoxygenNote: 7.1.2 #> ✔ Writing 'NAMESPACE' #> ✔ Setting active project to '<no active project>' #> ✔ Setting active project to '/tmp/RtmpJgmyBY/mypackage' #> ✔ Writing 'R/mypackage-package.R' #> ✔ Writing 'README.md' #> ✔ Adding 'dplyr' to Imports field in DESCRIPTION #> ✔ Adding 'glue' to Imports field in DESCRIPTION #> ✔ Adding 'purrr' to Imports field in DESCRIPTION #> ✔ Adding 'cli' to Imports field in DESCRIPTION #> ✔ Adding 'crayon' to Imports field in DESCRIPTION #> ✔ Adding 'rstudioapi' to Imports field in DESCRIPTION #> ✔ Writing 'R/core.R' #> ✔ Writing 'R/attach.R' #> ✔ Writing 'R/conflicts.R' #> ✔ Writing 'R/pipe.R' #> ✔ Writing 'R/utils.R' #> ✔ Writing 'R/zzz.R' #> • Updating documentation and installing mypackage... #> ℹ Loading mypackage #>  #> ── Attaching packages ─────────────────────────────────────── mypackage 1.0.0 ── #>  #> ✔ dplyr 1.0.7     ✔ purrr 0.3.4 #> ✔ glue  1.6.1      #>  #> ──────────────────────────────────────────────────────────────── Ready to go! ── #> Running /opt/R/4.1.2/lib/R/bin/R CMD INSTALL /tmp/RtmpJgmyBY/mypackage \\ #>   --install-tests  #> * installing to library ‘/home/runner/work/_temp/Library’ #> * installing *source* package ‘mypackage’ ... #> ** using staged installation #> ** R #> ** byte-compile and prepare package for lazy loading #> ** help #> *** installing help indices #> ** building package indices #> ** testing if installed package can be loaded from temporary location #> ** testing if installed package can be loaded from final location #> ** testing if installed package keeps a record of temporary installation path #> * DONE (mypackage) #> ✔ Setting active project to '<no active project>' #> /tmp/RtmpJgmyBY/mypackage #> ├── DESCRIPTION #> ├── NAMESPACE #> ├── R #> │   ├── attach.R #> │   ├── conflicts.R #> │   ├── core.R #> │   ├── mypackage-package.R #> │   ├── pipe.R #> │   ├── utils.R #> │   └── zzz.R #> ├── README.md #> └── man #>     ├── mypackage-package.Rd #>     └── pipe.Rd"},{"path":"https://mrcaseb.github.io/personalr/articles/personalr.html","id":"update-your-package","dir":"Articles","previous_headings":"Usage","what":"Update your package","title":"Introduction to personalr","text":"basically two reasons want update personal package: want update list core packages want add helper function can call package loaded (.e. ‘export’ function)","code":""},{"path":"https://mrcaseb.github.io/personalr/articles/personalr.html","id":"update-your-core-packages","dir":"Articles","previous_headings":"Usage > Update your package","what":"Update your ‘core’ packages","title":"Introduction to personalr","text":"separate function personalr update list core packages: update_core(). can either append new packages existing core overwrite completely (logical argument append). Assuming run code created personal package \"mypackage\" core packages “dplyr”, “glue” “purrr” can add another package, e.g. “tibble” running following code (please note example uses temporary directories run machine ’s easier open project set path = \".\"). Now \"mypackage\" attaches “dplyr”, “glue”, “purrr” “tibble” loaded. want overwrite core (.e. use “tibble” drop packages) just set append = FALSE code chunk.","code":"update_core(path = temp_directory, packagename = \"mypackage\", core = \"tibble\", append = TRUE) #> ✔ Setting active project to '/tmp/RtmpJgmyBY/mypackage' #> ✔ Adding 'tibble' to Imports field in DESCRIPTION #> ℹ If you really want to update your core you'll have toconfirm the following dialogue...! #> ✔ Leaving 'R/core.R' unchanged #> ✔ Setting Version field in DESCRIPTION to '1.0.1' #> • Updating documentation and installing mypackage... #> ℹ Loading mypackage #>  #> Running /opt/R/4.1.2/lib/R/bin/R CMD INSTALL /tmp/RtmpJgmyBY/mypackage \\ #>   --install-tests  #> * installing to library ‘/home/runner/work/_temp/Library’ #> * installing *source* package ‘mypackage’ ... #> ** using staged installation #> ** R #> ** byte-compile and prepare package for lazy loading #> ** help #> *** installing help indices #> ** building package indices #> ** testing if installed package can be loaded from temporary location #> ** testing if installed package can be loaded from final location #> ** testing if installed package keeps a record of temporary installation path #> * DONE (mypackage) #> ✔ Setting active project to '<no active project>'"},{"path":"https://mrcaseb.github.io/personalr/articles/personalr.html","id":"add-your-own-exported-helper-function","dir":"Articles","previous_headings":"Usage > Update your package","what":"Add your own exported helper function","title":"Introduction to personalr","text":"One strengths package able save helper functions inside package make available code without littering Global Environment. Let’s say often use negated version %% select values vector. typical way !value %% vector. somewhat annoying ’s hard read code see exclamation mark beginning expression. now want write export little helper negated version %%, call %nin%. run inside project create new script \"R/nin.R\" open directly. Add code helper function don’t forget export #' @export (means next time document install package new function exported available usage). update package consider changing package version make clear something changed running afterwards documenting installing new version running","code":"usethis::use_r(\"nin\") #' @export '%nin%' <- Negate(`%in%`) usethis::use_version() devtools::document() devtools::install()"},{"path":"https://mrcaseb.github.io/personalr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Carl. Author, maintainer.","code":""},{"path":"https://mrcaseb.github.io/personalr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carl S (2022). personalr: Automated Personal Package Setup. https://mrcaseb.github.io/personalr/index.html, https://github.com/mrcaseb/personalr.","code":"@Manual{,   title = {personalr: Automated Personal Package Setup},   author = {Sebastian Carl},   year = {2022},   note = {https://mrcaseb.github.io/personalr/index.html, https://github.com/mrcaseb/personalr}, }"},{"path":[]},{"path":"https://mrcaseb.github.io/personalr/index.html","id":"preface","dir":"","previous_headings":"","what":"Preface","title":"An R Package for Automated Personal Package Setup","text":"work R programming language , come point want use already written code developing script often need packages work.easiest solution save loading regularly used packages maybe helper functions separate script load script source(...) Global Environment. However, approach two disadvantages: time, Global Environment becomes littered, making harder find important objects source script must either available --date local machine made available Internet.","code":""},{"path":"https://mrcaseb.github.io/personalr/index.html","id":"package-purpose","dir":"","previous_headings":"","what":"Package Purpose","title":"An R Package for Automated Personal Package Setup","text":"best solution mentioned disadvantages (personal) package, setup needs basic understanding develop packages. goal personalr exactly . basic setup personal package, loads modifiable list packages basic functions.","code":""},{"path":"https://mrcaseb.github.io/personalr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package for Automated Personal Package Setup","text":"can install released version personalr CRAN : can install development version GitHub :","code":"install.packages(\"personalr\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"mrcaseb/personalr\")"},{"path":"https://mrcaseb.github.io/personalr/index.html","id":"one-more-thing","dir":"","previous_headings":"","what":"One more thing","title":"An R Package for Automated Personal Package Setup","text":"personalr open source builds top open source projects. However, maintaining package lot work kindly ask consider donating patreon.","code":""},{"path":"https://mrcaseb.github.io/personalr/reference/personalr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"personalr: Automated Personal Package Setup — personalr-package","title":"personalr: Automated Personal Package Setup — personalr-package","text":"Functions setup personal R package attaches given libraries exports personal helper functions.","code":""},{"path":[]},{"path":"https://mrcaseb.github.io/personalr/reference/personalr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"personalr: Automated Personal Package Setup — personalr-package","text":"Maintainer: Sebastian Carl mrcaseb@gmail.com","code":""},{"path":"https://mrcaseb.github.io/personalr/reference/setup_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Personal Package — setup_package","title":"Setup Personal Package — setup_package","text":"function setup new personal package update existing package.","code":""},{"path":"https://mrcaseb.github.io/personalr/reference/setup_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Personal Package — setup_package","text":"","code":"setup_package(path, packagename, core = NULL)"},{"path":"https://mrcaseb.github.io/personalr/reference/setup_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Personal Package — setup_package","text":"path path package shall created. exists, used. exist, created, provided parent path exists. packagename name newly generated package. checked make sure meets R package naming conventions. core vector list containing package names shall attached newly generated package loaded. packages must installed current system, otherwise error shown.","code":""},{"path":"https://mrcaseb.github.io/personalr/reference/setup_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Personal Package — setup_package","text":"","code":"# \\donttest{ # create package \"mypackage\" in temporary directory with # the core packages dplyr, glue and purrr withr::with_tempdir({   install.packages(     c(\"dplyr\", \"glue\", \"purrr\"),     repos = \"http://cran.us.r-project.org\"   )   setup_package(     path = tempdir(),     packagename = \"mypackage\",     core = c(\"dplyr\", \"glue\", \"purrr\")   ) }) #> Installing packages into ‘/home/runner/work/_temp/Library’ #> (as ‘lib’ is unspecified) #> ✔ Creating '/tmp/Rtmpl0TEza/mypackage/' #> ✔ Setting active project to '/tmp/Rtmpl0TEza/mypackage' #> ✔ Creating 'R/' #> ✔ Writing 'DESCRIPTION' #> Package: mypackage #> Title: What the Package Does (One Line, Title Case) #> Version: 1.0.0 #> Authors@R (parsed): #>     * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID) #> Description: What the package does (one paragraph). #> License: `use_mit_license()`, `use_gpl3_license()` or friends to #>     pick a license #> Encoding: UTF-8 #> Roxygen: list(markdown = TRUE) #> RoxygenNote: 7.1.2 #> ✔ Writing 'NAMESPACE' #> ✔ Setting active project to '<no active project>' #> ✔ Setting active project to '/tmp/Rtmpl0TEza/mypackage' #> ✔ Writing 'R/mypackage-package.R' #> ✔ Writing 'README.md' #> ✔ Adding 'dplyr' to Imports field in DESCRIPTION #> ✔ Adding 'glue' to Imports field in DESCRIPTION #> ✔ Adding 'purrr' to Imports field in DESCRIPTION #> ✔ Adding 'cli' to Imports field in DESCRIPTION #> ✔ Adding 'crayon' to Imports field in DESCRIPTION #> ✔ Adding 'rstudioapi' to Imports field in DESCRIPTION #> ✔ Writing 'R/core.R' #> ✔ Writing 'R/attach.R' #> ✔ Writing 'R/conflicts.R' #> ✔ Writing 'R/pipe.R' #> ✔ Writing 'R/utils.R' #> ✔ Writing 'R/zzz.R' #> • Updating documentation and installing mypackage... #> ℹ Loading mypackage #> ── Attaching packages ─────────────────────────────────────── mypackage 1.0.0 ── #> ✔ dplyr 1.0.7     ✔ purrr 0.3.4 #> ✔ glue  1.6.1      #> ──────────────────────────────────────────────────────────────── Ready to go! ── #> Running /opt/R/4.1.2/lib/R/bin/R CMD INSTALL /tmp/Rtmpl0TEza/mypackage \\ #>   --install-tests  #> * installing to library ‘/home/runner/work/_temp/Library’ #> * installing *source* package ‘mypackage’ ... #> ** using staged installation #> ** R #> ** byte-compile and prepare package for lazy loading #> ** help #> *** installing help indices #> ** building package indices #> ** testing if installed package can be loaded from temporary location #> ** testing if installed package can be loaded from final location #> ** testing if installed package keeps a record of temporary installation path #> * DONE (mypackage) #> ✔ Setting active project to '<no active project>' # }"},{"path":"https://mrcaseb.github.io/personalr/reference/update_core.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Core of Personal Package — update_core","title":"Update Core of Personal Package — update_core","text":"Updates \"core\" personal package created personalr. can either append another package current core overwrite new core.","code":""},{"path":"https://mrcaseb.github.io/personalr/reference/update_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Core of Personal Package — update_core","text":"","code":"update_core(path, packagename, core = NULL, append = TRUE)"},{"path":"https://mrcaseb.github.io/personalr/reference/update_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Core of Personal Package — update_core","text":"path path package shall created. exists, used. exist, created, provided parent path exists. packagename name newly generated package. checked make sure meets R package naming conventions. core vector list containing package names shall attached newly generated package loaded. packages must installed current system, otherwise error shown. append TRUE packages argument core appended current core package version increased \"patch\" level. Otherwise core overwritten package version increased \"minor\" level.","code":""},{"path":"https://mrcaseb.github.io/personalr/news/index.html","id":"personalr-development-version","dir":"Changelog","previous_headings":"","what":"personalr (development version)","title":"personalr (development version)","text":"installation personal package prompt user package upgrades.","code":""},{"path":"https://mrcaseb.github.io/personalr/news/index.html","id":"personalr-101","dir":"Changelog","previous_headings":"","what":"personalr 1.0.1","title":"personalr 1.0.1","text":"CRAN release: 2020-11-23 Preparation CRAN","code":""},{"path":"https://mrcaseb.github.io/personalr/news/index.html","id":"personalr-100","dir":"Changelog","previous_headings":"","what":"personalr 1.0.0","title":"personalr 1.0.0","text":"Initial release","code":""}]
